# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Competition {
    "Competition ID"
    competitionId: Int!
    description: String
    id: Int!
    location: String
    name: String!
    oresultsIntegration: String
    organizer: String
    owner: User
    startTime: DateTime!
    type: String!
}

type Mutation {
    createCompetition(competition: CreateCompetitionInput!): Boolean!
    createNetworkCommand(createNetworkCommandInput: CreateNetworkCommandInput!): Boolean!
    createOresultsMapping(createOresultsMappingInput: CreateOresultsMappingInput!): Boolean!
    createUser(createUserInput: CreateUserInput!): User!
    login(password: String!, username: String!): Boolean!
    logout: Boolean!
    register(password: String!, username: String!): Boolean!
    removeCompetition(competitionId: Int!): Boolean!
    removeNetworkCommand(id: Int!): Boolean!
    removeNode(id: Int!): Boolean!
    removeOresultsMapping(id: Int!): Boolean!
    removeUser(id: Int!): User!
    updateCompetition(competition: UpdateCompetitionInput!): Boolean!
}

type NetworkCommand {
    competition_id: Int!
    creation_time: DateTime!
    data: Int!
    "NetworkCommand ID"
    id: Int!
    owner: User
    type: String!
}

type Node {
    battery_level: Int!
    competition_id: String!
    id: Int!
    last_contact: DateTime!
    neighbours: String!
    node_id: String!
    node_type: Int!
    owner: User
}

type OResultsMapping {
    "OResults API key"
    api_key: String!
    "Mapping ID"
    id: Int!
    "Local node ID"
    node_id: String!
    owner: User
}

type Punch {
    competition_id: String!
    "Punch ID"
    id: Int!
    owner: User
    receive_time: DateTime!
    seconds: Int!
    si_number: String!
    station_number: String!
    time: DateTime!
}

type Query {
    checkLogin: Boolean!
    competition(competitionId: Int!): Competition!
    competitions: [Competition!]!
    networkCommands: [NetworkCommand!]!
    nodes: [Node!]!
    oresultsMappings: [OResultsMapping!]!
    punches(after: DateTime): [Punch!]!
    userById(id: Int!): User!
    userByUsername(username: String!): User!
    users: [User!]!
}

type Subscription {
    competitionAdded: Competition!
    competitionRemoved: Competition!
    networkCommandAdded: NetworkCommand!
    networkCommandRemoved: NetworkCommand!
    nodeAdded: Node
    nodeRemoved: Node!
    oresultsMappingAdded: OResultsMapping!
    oresultsMappingRemoved: OResultsMapping!
    punchAdded: Punch!
}

type User {
    competitions: String!
    "User ID"
    id: Int!
    password: String!
    token: String!
    user_type: Int!
    username: String!
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input CreateCompetitionInput {
    "Competition description"
    description: String
    "Competition location"
    location: String
    "Competition name"
    name: String!
    "Competition organizer"
    organizer: String
    "Competition start time"
    startTime: DateTime!
    "Competition type"
    type: String!
}

input CreateNetworkCommandInput {
    "Id of the competition the command is for."
    competition_id: String!
    "Command data (currently also Int)"
    data: Int!
    "Command type (String)"
    type: String!
}

input CreateOresultsMappingInput {
    "Local node ID"
    local_id: String!
    "OResults api key for the device"
    oresults_key: String!
}

input CreateUserInput {
    password: String!
    "User type (0 = user, 1 = administrator)"
    user_type: Int!
    "Unique username"
    username: String!
}

input UpdateCompetitionInput {
    "Competition ID"
    competitionId: Int!
    "Competition description"
    description: String
    id: Int!
    "Competition location"
    location: String
    "Competition name"
    name: String!
    "Competition organizer"
    organizer: String
    "Competition start time"
    startTime: DateTime!
    "Competition type"
    type: String!
}
